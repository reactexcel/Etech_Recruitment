{"version":3,"sources":["meteor://ðŸ’»app/packages/webpack_css/webpack.config.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/webpack_css.js","sourcesContent":["var weight = 200;\n\nfunction dependencies(settings) {\n  return {\n    devDependencies: {\n      'style-loader' : '^0.13.0',\n      'css-loader': '^0.23.0',\n      'extract-text-webpack-plugin': '^0.9.1'\n    }\n  };\n}\n\nfunction config(settings, require) {\n  var cssLoader = '';\n  var loaders = [];\n  var plugins = [];\n\n  var queries = _.clone(settings.css || {});\n\n  // Support old setting\n  if (queries.module) {\n    queries.modules = queries.module;\n    delete queries.module;\n  }\n\n  if (process.env.NODE_ENV !== 'production' && settings.styles && settings.styles.sourceMap) {\n    queries.sourceMap = true;\n  }\n\n  if (queries.modulesExcludes) {\n    delete queries.modulesExcludes;\n  }\n\n  if (queries.modules && !queries.localIdentName) {\n    queries.localIdentName = '[name]__[local]__[hash:base64:5]';\n  }\n\n  if (settings.isDebug) {\n    if (settings.platform === 'server') {\n      settings.cssLoader = 'css/locals?' + JSON.stringify(queries);\n    } else {\n      settings.cssLoader = 'style!css?' + JSON.stringify(queries);\n    }\n  } else {\n    if (settings.platform === 'server') {\n      settings.cssLoader = 'css/locals?' + JSON.stringify(queries);\n    } else {\n      settings.cssLoader = 'css?' + JSON.stringify(queries);\n      settings.cssExtract = true;\n    }\n  }\n\n  var cssLoader = settings.cssLoader;\n\n  if (settings.cssExtract) {\n    var ExtractTextPlugin = require('extract-text-webpack-plugin');\n    plugins.push(new ExtractTextPlugin('style.css'));\n    cssLoader = ExtractTextPlugin.extract('style', cssLoader);\n  }\n\n  var _mapRegex = function(stringArray) {\n    var result = [];\n    for (var i = 0, len = stringArray.length; i < len; i++) {\n      result.push(new RegExp(stringArray[i]));\n    }\n    return result;\n  };\n\n  // Let postcss control CSS files if it is there\n  if (cssLoader && settings.packages.indexOf('webpack:postcss') < 0) {\n    if (settings.css && settings.css.modules && settings.css.modulesExcludes) {\n      loaders.push({ test: /\\.css$/, loader: cssLoader, exclude: _mapRegex(settings.css.modulesExcludes) });\n    } else {\n      loaders.push({ test: /\\.css$/, loader: cssLoader });\n    }\n  }\n\n  return {\n    loaders: loaders,\n    plugins: plugins,\n    extensions: ['.css']\n  };\n}\n"]}