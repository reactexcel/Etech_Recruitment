{"version":3,"sources":["meteor://ðŸ’»app/packages/webpack_react/webpack.config.js"],"names":[],"mappingsfile":"/packages/webpack_react.js","sourcesContent":["var weight = 100;\n\nfunction dependencies() {\n  return {\n    dependencies: {\n      'react': '^15.0.0',\n      'react-dom': '^15.0.0',\n      'react-addons-pure-render-mixin': '^15.0.0'\n    },\n    devDependencies: {\n      'babel': '^6.3.26',\n      'babel-core': '^6.3.26',\n      'babel-loader' : '^6.2.0',\n      'babel-preset-react': '^6.3.13',\n      'babel-preset-es2015': '^6.3.13',\n      'babel-preset-stage-0': '^6.3.13',\n      'babel-plugin-transform-decorators-legacy': '^1.3.2',\n      'babel-plugin-add-module-exports': '^0.1.2',\n      'babel-plugin-react-transform': '^2.0.0',\n      'expose-loader': '^0.7.1',\n      'react-transform-hmr' : '^1.0.1',\n      'react-transform-catch-errors': '^1.0.0',\n      'redbox-react': '^1.2.0'\n    }\n  };\n}\n\nfunction config(settings, require) {\n  var fs = require('fs');\n  var path = require('path');\n  var babelSettings = {};\n  var tsConfig = {};\n\n  var CWD = path.resolve('./');\n\n  if (fs.existsSync(CWD + '/.babelrc')) {\n    var babelrc = fs.readFileSync(CWD + '/.babelrc');\n    babelSettings = JSON.parse(babelrc);\n  }\n\n  if (fs.existsSync(CWD + '/tsconfig.json')) {\n    var tsConfigData = fs.readFileSync(CWD + '/tsconfig.json');\n    tsConfig = JSON.parse(tsConfigData);\n  }\n\n  if (!tsConfig.compilerOptions) {\n    tsConfig.compilerOptions = {};\n  }\n\n  if (typeof tsConfig.compilerOptions.target === 'undefined') { tsConfig.compilerOptions.target = 'es6'; }\n  if (typeof tsConfig.compilerOptions.jsx === 'undefined') { tsConfig.compilerOptions.jsx = 'react'; }\n  if (typeof tsConfig.compilerOptions.sourceMap === 'undefined') { tsConfig.compilerOptions.sourceMap = true; }\n  if (typeof tsConfig.compilerOptions.experimentalDecorators === 'undefined') { tsConfig.compilerOptions.experimentalDecorators = true; }\n  if (typeof tsConfig.compilerOptions.module === 'undefined') { tsConfig.compilerOptions.module = 'commonjs'; }\n\n  if (!tsConfig.exclude) { tsConfig.exclude = []; }\n  if (tsConfig.exclude.indexOf('node_modules') < 0) { tsConfig.exclude.push('node_modules'); }\n  if (tsConfig.exclude.indexOf('.meteor') < 0) { tsConfig.exclude.push('.meteor'); }\n\n  if (!babelSettings.presets) {\n    babelSettings.presets = [];\n  }\n\n  if (!babelSettings.plugins) {\n    babelSettings.plugins = [];\n  }\n\n  if (babelSettings.presets.indexOf('react') < 0) {\n    babelSettings.presets.push('react');\n  }\n\n  if (babelSettings.presets.indexOf('es2015') < 0) {\n    babelSettings.presets.push('es2015');\n  }\n\n  if (babelSettings.presets.indexOf('stage-0') < 0 &&\n      babelSettings.presets.indexOf('stage-1') < 0 &&\n      babelSettings.presets.indexOf('stage-2') < 0 &&\n      babelSettings.presets.indexOf('stage-3') < 0) {\n    babelSettings.presets.push('stage-0');\n  }\n\n  if (settings.babel && settings.babel.plugins) {\n    babelSettings.plugins = babelSettings.plugins.concat(settings.babel.plugins);\n  }\n\n  if (babelSettings.plugins.indexOf('transform-decorators-legacy') < 0) {\n    babelSettings.plugins.push('transform-decorators-legacy');\n  }\n\n  if (babelSettings.plugins.indexOf('add-module-exports') < 0) {\n    babelSettings.plugins.push('add-module-exports');\n  }\n\n  if (settings.isDebug && settings.platform !== 'server' && !IS_TEST) {\n    var transforms = [{\n      transform: 'react-transform-hmr',\n      imports: ['react'],\n      locals: ['module']\n    }];\n\n    if (settings.babel && !settings.babel.disableRedbox) {\n      transforms.push({\n        transform: 'react-transform-catch-errors',\n        imports: ['react', 'redbox-react']\n      });\n    }\n\n    babelSettings.plugins.push(['react-transform', { transforms: transforms }]);\n  }\n\n  var usingMeteorReact = settings.packages.indexOf('react-runtime') >= 0;\n  var extensions = ['.js', '.jsx'];\n  var loaders = [\n    { test: /\\/node_modules\\/react\\/react\\.js$/, loader: 'expose?React' },\n    { test: /\\.jsx?$/, loader: 'babel', query: babelSettings, exclude: /\\.meteor|node_modules/ }\n  ];\n\n  if (settings.packages.indexOf('webpack:typescript') >= 0) {\n    loaders.push({ test: /\\.tsx$/, loader: 'babel?' + JSON.stringify(babelSettings) + '!ts?' + JSON.stringify(tsConfig), exclude: /\\.meteor|node_modules/ });\n    extensions.push('.tsx');\n  }\n\n  var externals = {};\n\n  if (settings.isTest || settings.isAppTest) {\n    // Support for Enzyme\n    externals['react/addons'] = true;\n    externals['react/lib/ExecutionEnvironment'] = true;\n    externals['react/lib/ReactContext'] = true;\n  }\n\n  return {\n    loaders: loaders,\n    extensions: extensions,\n    externals: externals\n  };\n}\n"]}