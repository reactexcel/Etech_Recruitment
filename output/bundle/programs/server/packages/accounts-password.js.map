{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-password/email_templates.js","meteor://ðŸ’»app/packages/accounts-password/password_server.js"],"names":[],"mappings":"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","file":"/packages/accounts-password.js","sourcesContent":["function greet(welcomeMsg) {\n  return function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return `${greeting}\n\n${welcomeMsg}, simply click the link below.\n\n${url}\n\nThanks.\n`;\n  };\n}\n\n/**\n * @summary Options to customize emails sent from the Accounts system.\n * @locus Server\n * @importFromPackage accounts-base\n */\nAccounts.emailTemplates = {\n  from: \"Meteor Accounts <no-reply@meteor.com>\",\n  siteName: Meteor.absoluteUrl().replace(/^https?:\\/\\//, '').replace(/\\/$/, ''),\n\n  resetPassword: {\n    subject: function(user) {\n      return \"How to reset your password on \" + Accounts.emailTemplates.siteName;\n    },\n    text: function(user, url) {\n      var greeting = (user.profile && user.profile.name) ?\n            (\"Hello \" + user.profile.name + \",\") : \"Hello,\";\n      return `${greeting}\n\nTo reset your password, simply click the link below.\n\n${url}\n\nThanks.\n`;\n    }\n  },\n  verifyEmail: {\n    subject: function(user) {\n      return \"How to verify email address on \" + Accounts.emailTemplates.siteName;\n    },\n    text: greet(\"To verify your account email\")\n  },\n  enrollAccount: {\n    subject: function(user) {\n      return \"An account has been created for you on \" + Accounts.emailTemplates.siteName;\n    },\n    text: greet(\"To start using the service\")\n  }\n};\n","/// BCRYPT\n\nvar bcrypt = NpmModuleBcrypt;\nvar bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nvar bcryptCompare = Meteor.wrapAsync(bcrypt.compare);\n\n// User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords (unless they have a 'services.password.srp'\n// field, in which case they will be upgraded to bcrypt the next time\n// they log in).\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = 10;\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nvar getPasswordString = function (password) {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else { // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" +\n                      \"Only 'sha-256' is allowed.\");\n    }\n    password = password.digest;\n  }\n  return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nvar hashPassword = function (password) {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds);\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\nAccounts._checkPassword = function (user, password) {\n  var result = {\n    userId: user._id\n  };\n\n  password = getPasswordString(password);\n\n  if (! bcryptCompare(password, user.services.password.bcrypt)) {\n    result.error = new Meteor.Error(403, \"Incorrect password\");\n  }\n\n  return result;\n};\nvar checkPassword = Accounts._checkPassword;\n\n///\n/// LOGIN\n///\n\nAccounts._findUserByQuery = function (query) {\n  var user = null;\n\n  if (query.id) {\n    user = Meteor.users.findOne({ _id: query.id });\n  } else {\n    var fieldName;\n    var fieldValue;\n    if (query.username) {\n      fieldName = 'username';\n      fieldValue = query.username;\n    } else if (query.email) {\n      fieldName = 'emails.address';\n      fieldValue = query.email;\n    } else {\n      throw new Error(\"shouldn't happen (validation missed something)\");\n    }\n    var selector = {};\n    selector[fieldName] = fieldValue;\n    user = Meteor.users.findOne(selector);\n    // If user is not found, try a case insensitive lookup\n    if (!user) {\n      selector = selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n      var candidateUsers = Meteor.users.find(selector).fetch();\n      // No match if multiple candidates are found\n      if (candidateUsers.length === 1) {\n        user = candidateUsers[0];\n      }\n    }\n  }\n\n  return user;\n};\n\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByUsername = function (username) {\n  return Accounts._findUserByQuery({\n    username: username\n  });\n};\n\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByEmail = function (email) {\n  return Accounts._findUserByQuery({\n    email: email\n  });\n};\n\n// Generates a MongoDB selector that can be used to perform a fast case\n// insensitive lookup for the given fieldName and string. Since MongoDB does\n// not support case insensitive indexes, and case insensitive regex queries\n// are slow, we construct a set of prefix selectors for all permutations of\n// the first 4 characters ourselves. We first attempt to matching against\n// these, and because 'prefix expression' regex queries do use indexes (see\n// http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n// this has been found to greatly improve performance (from 1200ms to 5ms in a\n// test with 1.000.000 users).\nvar selectorForFastCaseInsensitiveLookup = function (fieldName, string) {\n  // Performance seems to improve up to 4 prefix characters\n  var prefix = string.substring(0, Math.min(string.length, 4));\n  var orClause = _.map(generateCasePermutationsForString(prefix),\n    function (prefixPermutation) {\n      var selector = {};\n      selector[fieldName] =\n        new RegExp('^' + Meteor._escapeRegExp(prefixPermutation));\n      return selector;\n    });\n  var caseInsensitiveClause = {};\n  caseInsensitiveClause[fieldName] =\n    new RegExp('^' + Meteor._escapeRegExp(string) + '$', 'i')\n  return {$and: [{$or: orClause}, caseInsensitiveClause]};\n}\n\n// Generates permutations of all case variations of a given string.\nvar generateCasePermutationsForString = function (string) {\n  var permutations = [''];\n  for (var i = 0; i < string.length; i++) {\n    var ch = string.charAt(i);\n    permutations = _.flatten(_.map(permutations, function (prefix) {\n      var lowerCaseChar = ch.toLowerCase();\n      var upperCaseChar = ch.toUpperCase();\n      // Don't add unneccesary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    }));\n  }\n  return permutations;\n}\n\nvar checkForCaseInsensitiveDuplicates = function (fieldName, displayName, fieldValue, ownUserId) {\n  // Some tests need the ability to add users with the same case insensitive\n  // value, hence the _skipCaseInsensitiveChecksForTest check\n  var skipCheck = _.has(Accounts._skipCaseInsensitiveChecksForTest, fieldValue);\n\n  if (fieldValue && !skipCheck) {\n    var matchedUsers = Meteor.users.find(\n      selectorForFastCaseInsensitiveLookup(fieldName, fieldValue)).fetch();\n\n    if (matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n        // Otherwise, check to see if there are multiple matches or a match\n        // that is not us\n        (matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId))) {\n      throw new Meteor.Error(403, displayName + \" already exists.\");\n    }\n  }\n};\n\n// XXX maybe this belongs in the check package\nvar NonEmptyString = Match.Where(function (x) {\n  check(x, String);\n  return x.length > 0;\n});\n\nvar userQueryValidator = Match.Where(function (user) {\n  check(user, {\n    id: Match.Optional(NonEmptyString),\n    username: Match.Optional(NonEmptyString),\n    email: Match.Optional(NonEmptyString)\n  });\n  if (_.keys(user).length !== 1)\n    throw new Match.Error(\"User property must have exactly one field\");\n  return true;\n});\n\nvar passwordValidator = Match.OneOf(\n  String,\n  { digest: String, algorithm: String }\n);\n\n// Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (! options.password || options.srp)\n    return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    password: passwordValidator\n  });\n\n\n  var user = Accounts._findUserByQuery(options.user);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  if (!user.services || !user.services.password ||\n      !(user.services.password.bcrypt || user.services.password.srp))\n    throw new Meteor.Error(403, \"User has no password set\");\n\n  if (!user.services.password.bcrypt) {\n    if (typeof options.password === \"string\") {\n      // The client has presented a plaintext password, and the user is\n      // not upgraded to bcrypt yet. We don't attempt to tell the client\n      // to upgrade to bcrypt, because it might be a standalone DDP\n      // client doesn't know how to do such a thing.\n      var verifier = user.services.password.srp;\n      var newVerifier = SRP.generateVerifier(options.password, {\n        identity: verifier.identity, salt: verifier.salt});\n\n      if (verifier.verifier !== newVerifier.verifier) {\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Incorrect password\")\n        };\n      }\n\n      return {userId: user._id};\n    } else {\n      // Tell the client to use the SRP upgrade process.\n      throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n        format: 'srp',\n        identity: user.services.password.srp.identity\n      }));\n    }\n  }\n\n  return checkPassword(\n    user,\n    options.password\n  );\n});\n\n// Handler to login using the SRP upgrade path. To use this login\n// handler, the client must provide:\n//   - srp: H(identity + \":\" + password)\n//   - password: a string or an object with properties 'digest' and 'algorithm'\n//\n// We use `options.srp` to verify that the client knows the correct\n// password without doing a full SRP flow. Once we've checked that, we\n// upgrade the user to bcrypt and remove the SRP information from the\n// user document.\n//\n// The client ends up using this login handler after trying the normal\n// login handler (above), which throws an error telling the client to\n// try the SRP upgrade path.\n//\n// XXX COMPAT WITH 0.8.1.3\nAccounts.registerLoginHandler(\"password\", function (options) {\n  if (!options.srp || !options.password)\n    return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    srp: String,\n    password: passwordValidator\n  });\n\n  var user = Accounts._findUserByQuery(options.user);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Check to see if another simultaneous login has already upgraded\n  // the user record to bcrypt.\n  if (user.services && user.services.password && user.services.password.bcrypt)\n    return checkPassword(user, options.password);\n\n  if (!(user.services && user.services.password && user.services.password.srp))\n    throw new Meteor.Error(403, \"User has no password set\");\n\n  var v1 = user.services.password.srp.verifier;\n  var v2 = SRP.generateVerifier(\n    null,\n    {\n      hashedIdentityAndPassword: options.srp,\n      salt: user.services.password.srp.salt\n    }\n  ).verifier;\n  if (v1 !== v2)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Incorrect password\")\n    };\n\n  // Upgrade to bcrypt on successful login.\n  var salted = hashPassword(options.password);\n  Meteor.users.update(\n    user._id,\n    {\n      $unset: { 'services.password.srp': 1 },\n      $set: { 'services.password.bcrypt': salted }\n    }\n  );\n\n  return {userId: user._id};\n});\n\n\n///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\nAccounts.setUsername = function (userId, newUsername) {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  var oldUsername = user.username;\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n\n  Meteor.users.update({_id: user._id}, {$set: {username: newUsername}});\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id}, {$set: {username: oldUsername}});\n    throw ex;\n  }\n};\n\n// Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\n//\n// XXX COMPAT WITH 0.8.1.3\n// Like the login method, if the user hasn't been upgraded from SRP to\n// bcrypt yet, then this method will throw an 'old password format'\n// error. The client should call the SRP upgrade login handler and then\n// retry this method again.\n//\n// UNLIKE the login method, there is no way to avoid getting SRP upgrade\n// errors thrown. The reasoning for this is that clients using this\n// method directly will need to be updated anyway because we no longer\n// support the SRP flow that they would have been doing to use this\n// method previously.\nMeteor.methods({changePassword: function (oldPassword, newPassword) {\n  check(oldPassword, passwordValidator);\n  check(newPassword, passwordValidator);\n\n  if (!this.userId)\n    throw new Meteor.Error(401, \"Must be logged in\");\n\n  var user = Meteor.users.findOne(this.userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  if (!user.services || !user.services.password ||\n      (!user.services.password.bcrypt && !user.services.password.srp))\n    throw new Meteor.Error(403, \"User has no password set\");\n\n  if (! user.services.password.bcrypt) {\n    throw new Meteor.Error(400, \"old password format\", EJSON.stringify({\n      format: 'srp',\n      identity: user.services.password.srp.identity\n    }));\n  }\n\n  var result = checkPassword(user, oldPassword);\n  if (result.error)\n    throw result.error;\n\n  var hashed = hashPassword(newPassword);\n\n  // It would be better if this removed ALL existing tokens and replaced\n  // the token for the current connection with a new one, but that would\n  // be tricky, so we'll settle for just replacing all tokens other than\n  // the one for the current connection.\n  var currentToken = Accounts._getLoginToken(this.connection.id);\n  Meteor.users.update(\n    { _id: this.userId },\n    {\n      $set: { 'services.password.bcrypt': hashed },\n      $pull: {\n        'services.resume.loginTokens': { hashedToken: { $ne: currentToken } }\n      },\n      $unset: { 'services.password.reset': 1 }\n    }\n  );\n\n  return {passwordChanged: true};\n}});\n\n\n// Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPassword = function (userId, newPlaintextPassword, options) {\n  options = _.extend({logout: true}, options);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  var update = {\n    $unset: {\n      'services.password.srp': 1, // XXX COMPAT WITH 0.8.1.3\n      'services.password.reset': 1\n    },\n    $set: {'services.password.bcrypt': hashPassword(newPlaintextPassword)}\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({_id: user._id}, update);\n};\n\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: function (options) {\n  check(options, {email: String});\n\n  var user = Accounts.findUserByEmail(options.email);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  const emails = _.pluck(user.emails || [], 'address');\n  const caseSensitiveEmail = _.find(emails, email => {\n    return email.toLowerCase() === options.email.toLowerCase();\n  });\n\n  Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n}});\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendResetPasswordEmail = function (userId, email) {\n  // Make sure the user exists, and email is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0])\n    email = user.emails[0].address;\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email))\n    throw new Error(\"No such email for user.\");\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: when\n  };\n  Meteor.users.update(userId, {$set: {\n    \"services.password.reset\": tokenRecord\n  }});\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n\n  var resetPasswordUrl = Accounts.urls.resetPassword(token);\n\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates.resetPassword.from\n      ? Accounts.emailTemplates.resetPassword.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.resetPassword.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.resetPassword.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.resetPassword.text(user, resetPasswordUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.resetPassword.html === 'function')\n    options.html =\n      Accounts.emailTemplates.resetPassword.html(user, resetPasswordUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendEnrollmentEmail = function (userId, email) {\n  // XXX refactor! This is basically identical to sendResetPasswordEmail.\n\n  // Make sure the user exists, and email is in their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0])\n    email = user.emails[0].address;\n  // make sure we have a valid email\n  if (!email || !_.contains(_.pluck(user.emails || [], 'address'), email))\n    throw new Error(\"No such email for user.\");\n\n  var token = Random.secret();\n  var when = new Date();\n  var tokenRecord = {\n    token: token,\n    email: email,\n    when: when\n  };\n  Meteor.users.update(userId, {$set: {\n    \"services.password.reset\": tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n\n  var enrollAccountUrl = Accounts.urls.enrollAccount(token);\n\n  var options = {\n    to: email,\n    from: Accounts.emailTemplates.enrollAccount.from\n      ? Accounts.emailTemplates.enrollAccount.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.enrollAccount.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.enrollAccount.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.enrollAccount.text(user, enrollAccountUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.enrollAccount.html === 'function')\n    options.html =\n      Accounts.emailTemplates.enrollAccount.html(user, enrollAccountUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods({resetPassword: function (token, newPassword) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"resetPassword\",\n    arguments,\n    \"password\",\n    function () {\n      check(token, String);\n      check(newPassword, passwordValidator);\n\n      var user = Meteor.users.findOne({\n        \"services.password.reset.token\": token});\n      if (!user)\n        throw new Meteor.Error(403, \"Token expired\");\n      var email = user.services.password.reset.email;\n      if (!_.include(_.pluck(user.emails || [], 'address'), email))\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Token has invalid email address\")\n        };\n\n      var hashed = hashPassword(newPassword);\n\n      // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n      var oldToken = Accounts._getLoginToken(self.connection.id);\n      Accounts._setLoginToken(user._id, self.connection, null);\n      var resetToOldToken = function () {\n        Accounts._setLoginToken(user._id, self.connection, oldToken);\n      };\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        var affectedRecords = Meteor.users.update(\n          {\n            _id: user._id,\n            'emails.address': email,\n            'services.password.reset.token': token\n          },\n          {$set: {'services.password.bcrypt': hashed,\n                  'emails.$.verified': true},\n           $unset: {'services.password.reset': 1,\n                    'services.password.srp': 1}});\n        if (affectedRecords !== 1)\n          return {\n            userId: user._id,\n            error: new Meteor.Error(403, \"Invalid email\")\n          };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      }\n\n      // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @importFromPackage accounts-base\n */\nAccounts.sendVerificationEmail = function (userId, address) {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  // Make sure the user exists, and address is one of their addresses.\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Error(\"Can't find user\");\n  // pick the first unverified address if we weren't passed an address.\n  if (!address) {\n    var email = _.find(user.emails || [],\n                       function (e) { return !e.verified; });\n    address = (email || {}).address;\n\n    if (!address) {\n      throw new Error(\"That user has no unverified email addresses.\");\n    }\n  }\n  // make sure we have a valid address\n  if (!address || !_.contains(_.pluck(user.emails || [], 'address'), address))\n    throw new Error(\"No such email address for user.\");\n\n\n  var tokenRecord = {\n    token: Random.secret(),\n    address: address,\n    when: new Date()};\n  Meteor.users.update(\n    {_id: userId},\n    {$push: {'services.email.verificationTokens': tokenRecord}});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  var verifyEmailUrl = Accounts.urls.verifyEmail(tokenRecord.token);\n\n  var options = {\n    to: address,\n    from: Accounts.emailTemplates.verifyEmail.from\n      ? Accounts.emailTemplates.verifyEmail.from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates.verifyEmail.subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates.verifyEmail.text === 'function') {\n    options.text =\n      Accounts.emailTemplates.verifyEmail.text(user, verifyEmailUrl);\n  }\n\n  if (typeof Accounts.emailTemplates.verifyEmail.html === 'function')\n    options.html =\n      Accounts.emailTemplates.verifyEmail.html(user, verifyEmailUrl);\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  Email.send(options);\n};\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods({verifyEmail: function (token) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"verifyEmail\",\n    arguments,\n    \"password\",\n    function () {\n      check(token, String);\n\n      var user = Meteor.users.findOne(\n        {'services.email.verificationTokens.token': token});\n      if (!user)\n        throw new Meteor.Error(403, \"Verify email link expired\");\n\n      var tokenRecord = _.find(user.services.email.verificationTokens,\n                               function (t) {\n                                 return t.token == token;\n                               });\n      if (!tokenRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link expired\")\n        };\n\n      var emailsRecord = _.find(user.emails, function (e) {\n        return e.address == tokenRecord.address;\n      });\n      if (!emailsRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n        };\n\n      // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n      Meteor.users.update(\n        {_id: user._id,\n         'emails.address': tokenRecord.address},\n        {$set: {'emails.$.verified': true},\n         $pull: {'services.email.verificationTokens': {address: tokenRecord.address}}});\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\nAccounts.addEmail = function (userId, newEmail, verified) {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (_.isUndefined(verified)) {\n    verified = false;\n  }\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Allow users to change their own email to a version with a different case\n\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n  var caseInsensitiveRegExp =\n    new RegExp('^' + Meteor._escapeRegExp(newEmail) + '$', 'i');\n\n  var didUpdateOwnEmail = _.any(user.emails, function(email, index) {\n    if (caseInsensitiveRegExp.test(email.address)) {\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': email.address\n      }, {$set: {\n        'emails.$.address': newEmail,\n        'emails.$.verified': verified\n      }});\n      return true;\n    }\n\n    return false;\n  });\n\n  // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  }\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  });\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id},\n      {$pull: {emails: {address: newEmail}}});\n    throw ex;\n  }\n}\n\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\nAccounts.removeEmail = function (userId, email) {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n\n  var user = Meteor.users.findOne(userId);\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  Meteor.users.update({_id: user._id},\n    {$pull: {emails: {address: email}}});\n}\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nvar createUser = function (options) {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n\n  var username = options.username;\n  var email = options.email;\n  if (!username && !email)\n    throw new Meteor.Error(400, \"Need to set a username or email\");\n\n  var user = {services: {}};\n  if (options.password) {\n    var hashed = hashPassword(options.password);\n    user.services.password = { bcrypt: hashed };\n  }\n\n  if (username)\n    user.username = username;\n  if (email)\n    user.emails = [{address: email, verified: false}];\n\n  // Perform a case insensitive check before insert\n  checkForCaseInsensitiveDuplicates('username', 'Username', username);\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n  var userId = Accounts.insertUserDoc(options, user);\n  // Perform another check after insert, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n  } catch (ex) {\n    // Remove inserted user if the check fails\n    Meteor.users.remove(userId);\n    throw ex;\n  }\n  return userId;\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({createUser: function (options) {\n  var self = this;\n  return Accounts._loginMethod(\n    self,\n    \"createUser\",\n    arguments,\n    \"password\",\n    function () {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation)\n        return {\n          error: new Meteor.Error(403, \"Signups forbidden\")\n        };\n\n      // Create user. result contains id and token.\n      var userId = createUser(options);\n      // safety belt. createUser is supposed to throw on error. send 500 error\n      // instead of sending a verification email with empty userid.\n      if (! userId)\n        throw new Error(\"createUser failed to insert new user\");\n\n      // If `Accounts._options.sendVerificationEmail` is set, register\n      // a token to verify the user's primary email, and send it to\n      // that address.\n      if (options.email && Accounts._options.sendVerificationEmail)\n        Accounts.sendVerificationEmail(userId, options.email);\n\n      // client gets logged in as the new user afterwards.\n      return {userId: userId};\n    }\n  );\n}});\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\nAccounts.createUser = function (options, callback) {\n  options = _.clone(options);\n\n  // XXX allow an optional callback?\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users._ensureIndex('services.email.verificationTokens.token',\n                          {unique: 1, sparse: 1});\nMeteor.users._ensureIndex('services.password.reset.token',\n                          {unique: 1, sparse: 1});\n"]}